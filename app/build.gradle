import java.text.DateFormat

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdk 33
    namespace 'com.gerwalex.sqlitedebugger'
    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG)
    def app_name = "SQLite Debugger"
    def versionPropsFile = file('./version.properties')
    def runTasks = gradle.startParameter.taskNames
    if (runTasks.toString().contains('assemble')) {
        println('Neuer Build!')
    }
    if (runTasks.toString().contains('bundleRelease')) {
        println('Neues Bundle!')
    }
    Properties versionProps = new Properties()
    if (versionPropsFile.exists()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    } else {
        versionProps['VERSION_MAJOR'] = "0"
        versionProps['VERSION_MINOR'] = "1"
        versionProps['VERSION_PATCHLEVEL'] = "1"
        versionProps['BUILDVERSION'] = "1"
    }
    def major = versionProps['VERSION_MAJOR'].toInteger()
    def minor = versionProps['VERSION_MINOR'].toInteger()
    def buildversion = versionProps['BUILDVERSION'].toInteger() + 1
    if (minor > 99) {
        throw new IllegalArgumentException("minor darf nicht groesser als 99 sein")
    }
    def patchlevel = versionProps['VERSION_PATCHLEVEL'].toInteger()
    if (patchlevel > 999) {
        throw new IllegalArgumentException("patchlevel darf nicht groesser als 999 sein")
    }
    versionProps['BUILDVERSION'] = buildversion.toString()
    // 1: change major and minor in file 'version.properties'
    versionProps.store(versionPropsFile.newWriter(), null)


    defaultConfig {
        minSdk 21
        targetSdk 33
        applicationId "com.gerwalex.sqlitedebugger"
        testApplicationId "com.gerwalex.sqlitedebugger.debug"
        versionCode major * 100 * 1000 + minor * 1000 + patchlevel
        versionName "$major.$minor"
        def now = df.format(System.currentTimeMillis())
        def prefVersion = "$app_name - Version $versionName (Build $patchlevel.$buildversion) vom $now"
        buildConfigField("boolean", "BundleVersion", String.valueOf(runTasks.toString().contains('bundleRelease')))
        resValue "string", "compiledAt", now
        resValue "string", "versionName", versionName
        resValue "string", "prefVersion", prefVersion
        println("$prefVersion")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        release {
            if (runTasks.toString().contains('signReleaseBundle')) {
                println('Neues Release!')
            }
            if (project.hasProperty("signing.properties")) {
                def signPropertiesFile = file(project.property("signing.properties"))
                if (signPropertiesFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(signPropertiesFile))
                    println('Using Signing-Properties from ' + signPropertiesFile.path)
                    storeFile file(props['keystore'])
                    storePassword props['keystore.password']
                    keyAlias props['keystore.alias']
                    keyPassword props['keystore.password']
                    println('Using keystore ' + storeFile.path + ', storePassword: ' +
                            storePassword + ', alias: ' + keyAlias + ', keyPassword: ' + keyPassword)
                } else {
                    def msg = 'release: SigningPropertiesFile not found: ' + signPropertiesFile.path
                    logger.log(LogLevel.ERROR, msg)
                    throw new IllegalStateException(msg)
                }
            } else {
                def msg = "release: signing properties not found"
                logger.log(LogLevel.ERROR, msg)
                throw new IllegalStateException(msg)
            }
        }

    }
    buildTypes {
        release {
            resValue "string", "app_name", app_name
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

        }
        debuggableRelease {
            resValue "string", "app_name", app_name
            minifyEnabled false
            debuggable = true
            signingConfig signingConfigs.release

        }
        debug {
            resValue "string", "app_name", app_name + " (beta)"
            applicationIdSuffix ".debug"

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        // Compile f√ºr unchecked und deprecation
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions {
                jvmTarget = '1.8'
                freeCompilerArgs = [
                        "-Xjavac-arguments='-Xlint:unchecked -Xlint:deprecation'"
                ]
                freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
            }
        }
    }
    kotlinOptions {
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }
}

dependencies {

    implementation 'com.github.gitwalex:recyclerviewadapters:0.0.1'
    implementation 'com.github.gitwalex:database:0.0.4'

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.activity:activity-ktx:1.5.1'
    implementation 'androidx.fragment:fragment-ktx:1.5.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Room
    def roomVersion = "2.4.3"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    //CAoC Custom Activity on Crash
    implementation 'cat.ereza:customactivityoncrash:2.4.0'

    // TableLayoutRecycler
    implementation 'com.github.evrencoskun:TableView:v0.8.9.4'



}